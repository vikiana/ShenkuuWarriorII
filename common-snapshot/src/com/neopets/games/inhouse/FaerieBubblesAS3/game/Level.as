/**
 *	Level Class
 *	Obj, containing information on all levels.
 *	Please note that although the game has place for easy and hard mode, 
 *	it seems that hard mode was never created.  So current Level class only has easy mode level info
 *
 *	@langversion ActionScript 3.0
 *	@playerversion Flash 9.0 
 *	@author Abraham Lee
 *	@since  Nov.2009
 */

package com.neopets.games.inhouse.FaerieBubblesAS3.game
{
	//----------------------------------------
	//	IMPORTS 
	//----------------------------------------
	
	
	//----------------------------------------
	//	CUSTOM IMPORTS 
	//----------------------------------------

	
	
	public class Level
	{
		//----------------------------------------
		//	CONSTANTS
		//----------------------------------------
		
		//----------------------------------------
		//	VARIABLES
		//----------------------------------------
		public var aLevels:Array = [];
		public var aObjects:Array = [];
		public var aExtras:Array = [];
		public var maxLevels:Number = 0;
		public var mode:Number = 0;
		public var maxy:Number = 0;
		public var maxx:Number = 0;
		
		//----------------------------------------
		//	CONSTRUCTOR 
		//----------------------------------------
		public function Level():void
		{
			
		}
		
		//----------------------------------------
		//	GETTERS AND SETTORS
		//----------------------------------------
		
		//----------------------------------------
		//	PUBLIC METHODS
		//----------------------------------------
		
		
		/**
		*	Initialize the levels
		*	@PARAM		md			Number		Easy or hard, 0 or 1, only 0 is valid though
		*	@PARAM		my			Number		maximum number of rows
		*	@PARAM		mx			Number		maximum number of columns
		*	@PARAM		bShowLevel	Boolean		if true, trace out the level
		**/
		public function init(md:Number, my:Number, mx:Number, bShowLevel:Boolean):void
		{
			// easy/hard 0/1
			mode = md;
			// max level size
			maxy = my;
			maxx = mx;
			
			// fill aLevels
			createLevels();
			
			// max number of levs
			maxLevels = aLevels.length;
			
			if ( bShowLevel ) {
				for ( var level=0; level< maxLevels; level++ ) {
					trace("level_"+(level+1)+": "+ aLevels[level]);
					for ( var cell=0; cell < aLevels[level].length; cell++ ) {
						trace("   cell_"+(cell+1)+"_Y    : " + aLevels[level][cell].gridY, "   cell_"+(cell+1)+"_X    : " + aLevels[level][cell].gridX, "   cell_"+(cell+1)+"_ball : " + aLevels[level][cell].ball);
					}
				}
			}
			
		}
		
		
		/**
		*	return the given level
		*	@PARAM		iLevel			Number		return this given level
		**/
		public function returnLevel(iLevel:Number):Array
		{
			if ( iLevel > maxLevels )
			iLevel = 1;			
			// return array[ gridcells, objects ]
			return ( aLevels[ iLevel-1 ] );
		}
		
		/**
		*	return an empty level where each cell of the grid is -1
		**/
		public function returnEmptyLevel():Array
		{
			var aTemp:Array = [];
			for ( var row = 0; row < maxy; row++ ) {
				aTemp.push( [] );
				for ( var col = 0; col < maxx; col++ ) {
					aTemp[row].push( -1 );
				}
			}
			return ( aTemp );
		}
		
		/**
		*	create levels
		**/
		public function createLevels():void
		{
			aLevels  = [];		
			var aLevs:Array;
			if ( mode == 0 ) 
			{
				aLevs = getEasyLevels()
			}
			else 
			{
				aLevs = getHardLevels();
			}
			
			// the grid cells
			for ( var level = 0; level < aLevs.length; level++ ) {
				aLevels.push( [] );
				for ( var cell = 0; cell < aLevs[level].length; cell++ ) {
					var oneCell:Array = aLevs[level][cell];
					var objCell:Cell = new Cell( oneCell[0], oneCell[1], oneCell[2] );
					aLevels[level].push( objCell );
				}
			}
			//trace (aLevels)
		}
		
		//----------------------------------------
		//	PROTECTED METHODS
		//----------------------------------------
		
		/**
		*	array of information on easy levels: [0,2,4] refers to [column, row, type of the bubble] so the type "4" bubble	will fill up the cell at [0,2]	
		**/
		protected function getEasyLevels():Array
		{
			var aGrid  = [];
			// course levels
			aGrid.push( [[0,1,1],[0,2,4],[0,3,1],[0,4,1],[0,5,1],[0,6,4],[0,7,1],[1,1,1],[1,2,1],[1,3,2],[1,4,2],[1,5,1],[1,6,1],[2,3,1],[2,4,1],[2,5,1]] );
			aGrid.push( [[0,1,2],[0,4,2],[0,7,2],[1,1,3],[1,3,3],[1,4,3],[1,6,3],[2,1,2],[2,2,2],[2,3,2],[2,4,2],[2,5,2],[2,6,2],[2,7,2]] );
			aGrid.push( [[0,1,5],[0,2,5],[0,3,6],[0,4,6],[0,5,6],[0,6,5],[0,7,5],[1,0,3],[1,1,3],[1,2,3],[1,3,3],[1,4,3],[1,5,3],[1,6,3],[1,7,3]] );
			aGrid.push( [[0,1,4],[0,2,4],[0,3,4],[0,4,4],[0,5,4],[0,6,4],[0,7,4]] );
			aGrid.push( [[0,4,5],[1,3,5],[1,4,5],[2,0,5],[2,1,5],[2,2,5],[2,3,5],[2,5,5],[2,6,5],[2,7,5],[2,8,5]] );
			aGrid.push( [[0,0,6],[0,8,6],[1,0,6],[1,1,6],[1,2,6],[1,3,6],[1,4,6],[1,5,6],[1,6,6],[1,7,6]] );
			// game levels
	
			// test
			// aGrid.push( [[0,1,1],[0,2,4],[0,3,1],[0,4,1],[0,5,1],[0,6,4],[0,7,1],[1,1,1],[1,2,1],[1,3,2],[1,4,2],[1,5,1],[1,6,1],[2,2,1],[2,3,1],[2,4,1],[2,5,1],[3,2,1],[3,3,1],[3,4,1],[4,2,1],[4,3,1],[4,4,1],[4,5,1],[5,2,1],[5,3,1],[5,4,1],[6,2,1],[6,3,1],[6,4,1],[6,5,1],[7,1,1],[7,2,1],[7,3,1],[7,4,1],[7,5,1],[8,1,1],[8,2,1],[8,3,1],[8,4,1],[8,5,1],[8,6,1]] );
			
			aGrid.push( [[0,0,1],[0,1,2],[0,2,1],[0,3,1],[0,4,1],[0,5,1],[0,6,1],[0,7,2],[0,8,1],[1,3,3],[1,4,3]] );
			aGrid.push( [[0,0,2],[0,1,2],[0,2,3],[0,3,2],[0,4,2],[0,5,2],[0,6,3],[0,7,2],[0,8,2],[1,0,4],[1,3,4],[1,4,4],[1,7,4]] );
			aGrid.push( [[0,0,3],[0,1,3],[0,2,3],[0,3,4],[0,4,3],[0,5,4],[0,6,3],[0,7,3],[0,8,3],[1,0,5],[1,1,5],[1,6,5],[1,7,5]] );
			aGrid.push( [[0,0,6],[0,1,6],[0,2,5],[0,3,6],[0,4,6],[0,5,6],[0,6,5],[0,7,6],[0,8,6],[1,0,1],[1,3,1],[1,4,1],[1,7,1]] );
			aGrid.push( [[0,0,4],[0,1,4],[0,2,1],[0,3,1],[0,5,2],[0,6,2],[0,7,3],[0,8,3],[1,2,1],[1,3,1],[1,4,2],[1,5,2]] );
			aGrid.push( [[0,1,1],[0,2,2],[0,3,3],[0,4,4],[0,5,5],[0,6,6],[0,7,1],[0,8,2],[1,0,1],[1,1,2],[1,2,3],[1,3,4],[1,4,5],[1,5,6],[1,6,1],[1,7,2]] );
			aGrid.push( [[0,0,5],[0,1,6],[0,2,1],[0,3,2],[0,4,3],[0,5,4],[0,6,5],[0,7,6],[1,0,5],[1,1,6],[1,2,1],[1,3,2],[1,4,3],[1,5,4],[1,6,5],[1,7,6]] );
			aGrid.push( [[0,0,1],[0,1,2],[0,2,3],[0,3,6],[0,4,2],[0,5,6],[0,6,1],[0,7,2],[0,8,3],[1,0,2],[1,1,3],[1,2,6],[1,3,1],[1,4,1],[1,5,6],[1,6,2],[1,7,3],[2,0,1],[2,1,2],[2,2,3],[2,3,6],[2,4,2],[2,5,6],[2,6,1],[2,7,2],[2,8,3]] );
			aGrid.push( [[0,0,4],[0,1,1],[0,2,4],[0,3,4],[0,4,1],[0,5,4],[0,6,4],[0,7,1],[0,8,4],[1,0,5],[1,1,5],[1,2,6],[1,3,5],[1,4,5],[1,5,6],[1,6,5],[1,7,5],[2,1,1],[2,3,1],[2,5,1],[2,7,1]] );
			aGrid.push( [[0,0,6],[0,1,1],[0,2,2],[0,3,1],[0,4,4],[0,5,1],[0,6,2],[0,7,1],[0,8,6],[1,1,1],[1,2,2],[1,3,4],[1,4,4],[1,5,2],[1,6,1],[2,2,2],[2,4,4],[2,6,2]] );
			aGrid.push( [[0,0,2],[0,1,1],[0,2,2],[0,3,3],[0,4,2],[0,5,5],[0,6,2],[0,7,1],[0,8,2],[1,0,1],[1,1,1],[1,2,3],[1,3,3],[1,4,5],[1,5,5],[1,6,1],[1,7,1],[2,1,1],[2,3,3],[2,5,5],[2,7,1]] );
			aGrid.push( [[0,0,2],[0,1,2],[0,2,2],[0,3,2],[0,4,2],[0,5,2],[0,6,2],[0,7,2],[0,8,2],[1,0,3],[1,1,3],[1,2,3],[1,3,3],[1,4,3],[1,5,3],[1,6,3],[1,7,3],[2,0,4],[2,1,4],[2,2,4],[2,3,4],[2,4,4],[2,5,4],[2,6,4],[2,7,4],[2,8,4]] );
			aGrid.push( [[0,0,3],[0,1,3],[0,2,3],[0,3,3],[0,4,1],[0,5,3],[0,6,3],[0,7,3],[0,8,3],[1,0,5],[1,1,5],[1,2,5],[1,3,5],[1,4,5],[1,5,5],[1,6,5],[1,7,5],[2,0,6],[2,1,6],[2,2,6],[2,3,6],[2,4,6],[2,5,6],[2,6,6],[2,7,6],[2,8,6]] );
			aGrid.push( [[0,0,1],[0,1,2],[0,2,3],[0,3,1],[0,4,2],[0,5,3],[0,6,1],[0,7,2],[0,8,3],[1,0,4],[1,1,5],[1,2,6],[1,3,4],[1,4,5],[1,5,6],[1,6,4],[1,7,5]] );
			aGrid.push( [[0,0,1],[0,1,2],[0,2,3],[0,3,4],[0,4,5],[0,5,6],[0,6,1],[0,7,2],[0,8,3],[1,0,4],[1,1,5],[1,2,6],[1,3,1],[1,4,2],[1,5,3],[1,6,4],[1,7,5],[2,0,6],[2,1,1],[2,2,2],[2,3,3],[2,4,4],[2,5,5],[2,6,6],[2,7,1],[2,8,2]] );
			aGrid.push( [[0,1,3],[0,4,3],[0,7,3],[1,1,2],[1,3,4],[1,4,1],[1,6,4],[2,2,1],[2,3,5],[2,5,2],[2,6,5],[3,2,6],[3,5,6]] );
			aGrid.push( [[0,2,5],[0,4,6],[0,6,2],[0,8,1],[1,1,4],[1,3,3],[1,5,4],[1,7,5],[2,1,2],[2,3,1],[2,5,3],[2,7,3],[3,0,1],[3,2,6],[3,4,1],[3,6,2]] );
			aGrid.push( [[0,3,2],[0,4,2],[1,2,3],[1,3,3],[1,4,3],[2,2,4],[2,3,4],[2,4,4],[2,5,4],[3,1,5],[3,2,5],[3,3,5],[3,4,5],[3,5,5],[4,1,6],[4,2,6],[4,3,6],[4,4,6],[4,5,6],[4,6,6]] );
			aGrid.push( [[0,0,1],[0,4,3],[0,8,6],[1,0,2],[1,3,4],[1,4,5],[1,7,1],[2,1,3],[2,4,6],[2,7,2],[3,1,4],[3,3,1],[3,4,3],[3,6,3],[4,2,5],[4,3,6],[4,4,3],[4,5,2],[4,6,4]] );
			aGrid.push( [[0,0,1],[0,1,2],[0,4,6],[0,7,2],[0,8,1],[1,0,1],[1,1,3],[1,2,5],[1,3,1],[1,4,1],[1,5,5],[1,6,3],[1,7,1],[2,0,3],[2,1,4],[2,4,2],[2,7,4],[2,8,3],[3,0,3],[3,1,5],[3,2,4],[3,3,3],[3,4,3],[3,5,4],[3,6,5],[3,7,3],[4,0,5],[4,1,6],[4,4,4],[4,7,6],[4,8,5],[5,0,5],[5,1,6],[5,2,1],[5,3,2],[5,4,4],[5,5,6],[5,6,1],[5,7,5]] );
			return ( aGrid );
		}
		
		protected function getHardLevels():Array
		{
			var aGrid  = [];
			return ( aGrid );
		}
		
		//----------------------------------------
		//	PRIVATE METHODS
		//----------------------------------------
		
		//----------------------------------------
		//	EVENT LISTENERS
		//----------------------------------------
	}
}