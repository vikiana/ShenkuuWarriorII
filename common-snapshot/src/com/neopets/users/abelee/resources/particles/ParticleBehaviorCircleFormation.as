/*	AS 3.0 * *	Basic format for as classes *	Author @ Abraham Lee *	 * */  package com.neopets.users.abelee.resources.particles {	 	 //--------------------------------------------------	 // IMPORTS 	 //--------------------------------------------------	 	 	 //--------------------------------------------------	 // CUSTOM IMPORTS 	 //--------------------------------------------------	 	 public class ParticleBehaviorCircleFormation	 {		 //--------------------------------------------------		 // CONSTANT		 //--------------------------------------------------		 //public static const NORMAL:String = "normal";		 		 //--------------------------------------------------		 // VARIABLES		 //--------------------------------------------------		 		 		 //--------------------------------------------------		 // CONSTRUCTOR 		 //--------------------------------------------------		 public function ParticleBehaviorCircleFormation (px:Number, py:Number, pNum:int, pRadius:Number, pPower:Number, pParticleArray:Array, pImageClass:Class, pTerminateCondition:Object, pGravity:Array, pFriction:Number)		 {			 perfectCircleFormation(px, py, pNum, pRadius, pPower, pParticleArray, pImageClass, pTerminateCondition, pGravity, pFriction)		 }		 		 //--------------------------------------------------		 // SETTERS AND GETTERS		 //--------------------------------------------------		 		 //--------------------------------------------------		 // PUBLIC METHODS		 //--------------------------------------------------		 		 //--------------------------------------------------		 // PRIVATE METHODS 		 //--------------------------------------------------		 private function perfectCircleFormation(px:Number, py:Number, pNum:int, pRadius:Number, pPower:Number, pParticleArray:Array, pImageClass:Class, pTerminateCondition:Object, pGravity:Array, pFriction:Number):void		 {			// trace (px, py, pNum, pRadius, pPower, pParticleArray);			var inc:Number = Math.PI * 2 / pNum;			 			for (var i:int = 0; i < pNum; i++)			{				var xpos:Number = Math.cos(inc * i) * pRadius + px;				var ypos:Number = Math.sin(inc * i) * pRadius + py;				var particle:ParticleBasic = new ParticleBasic (pParticleArray, xpos, ypos, pPower, new pImageClass (), pTerminateCondition, pGravity, pFriction,false, inc * i);				pParticleArray.push(particle);			 } 		 }		 		 //--------------------------------------------------		 // EVENT LISTENER		 //--------------------------------------------------		  	 }	  }  